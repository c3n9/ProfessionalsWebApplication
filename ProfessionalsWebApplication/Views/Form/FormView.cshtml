@using ProfessionalsWebApplication.Models
@model FormModel

@{
	ViewData["Title"] = Model.Name;
}
<head>
	<link href="/styles/style.css" rel="stylesheet" />
	<link rel="preconnect" href="https://fonts.googleapis.com">
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
	<link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
</head>

<form method="post" enctype="multipart/form-data" id="form" class="w">
	<h2>@Model.Name</h2>
	@foreach (var question in Model.Questions)
	{
		@if (question.Type == "Text")
		{
			<div class="input-container">
				<input type="text" class="form-control no-digits" name="@question.Text" id="question-@question.Id" @(question.IsRequired ? "required" : "") placeholder=" " pattern="^[^\d]*$" />
				<label for="question-@question.Id" class="floating-label">
					@question.Text.TrimEnd(':')
				</label>
				@* <p class="note">note</p> *@
			</div>
		}
		else if (question.Type == "Button" && question.Options != null && question.IsDropDown == false)
		{
			<div class="toggle-full">
				<label for="question-@question.Id">@question.Text</label>
				<div class="toggle-buttons">
					@foreach (var option in question.Options)
					{
						<input type="radio" name="@question.Text" value="@option" id="option-@question.Id-@option" @(question.IsRequired ? "required" : "") />
						<label class="toggle-button" for="option-@question.Id-@option">@option</label>
					}
				</div>
			</div>

		}
		else if (question.Type == "Button" && question.Options != null && question.IsDropDown == true)
		{
			<div class="custom-select-container">
				<select class="custom-select" name="@question.Text" id="question-@question.Id" @(question.IsRequired ? "required" : "")>
					<option value="" disabled selected hidden></option>
					@foreach (var option in question.Options)
					{
						<option value="@option">@option</option>
					}
				</select>
				<label class="select-placeholder">@question.Text.TrimEnd(':')</label>
				<div class="select-arrow">▼</div>
			</div>
		}
		else if (question.Type == "File")
		{
			<label for="question-@question.Id">@question.Text</label>
			<input type="file" class="form-control" name="@question.DisplayText" id="question-@question.Id" accept="image/*,.pdf,.doc,.docx" @(question.IsRequired ? "required" : "") />
		}
	}

	<button type="submit" class="ripple-button">Отправить</button>
</form>

<script src="https://cdn.jsdelivr.net/npm/jsencrypt@3.0.0-rc.1/bin/jsencrypt.min.js"></script>
<script>
	document.getElementById('form').onsubmit = function(event) {
		event.preventDefault();

		let formData = new FormData(document.getElementById('form'));
		let data = {
			FormId: '@Model.Id',
			Answers: {},
		};

		let filePromises = [];

		formData.forEach((value, key) => {
			if (value instanceof File) {
				let reader = new FileReader();
				let filePromise = new Promise((resolve, reject) => {
					reader.onloadend = function() {
						data.Answers[key] = {
							FileName: value.name,
							FileSize: value.size,
							FileContent: reader.result.split(',')[1],
						};
						resolve();
					};
					reader.onerror = function() {
						reject('Ошибка при чтении файла');
					};
					reader.readAsDataURL(value);
				});
				filePromises.push(filePromise);
			} else {
				data.Answers[key] = value;
			}
		});

		Promise.all(filePromises)
			.then(() => {
				submitEncrypted(data);
			})
			.catch(error => {
				alert("Ошибка при обработке файлов: " + error);
			});
	};

	function submitEncrypted(data) {
		const rsa = new JSEncrypt();

		const publicKey = `
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApg2xMiBZY7y+F73l31Ke
7OPWIkaCHk847QZo+dOTkeb98+iP+z3AOViCK18lWikLthlCoIGaDcKPRrVL8faK
vbzv43Ka12i/eZIbp7JW4ek/I1bRdYd41coHmdD3HEbs56goUJBVBcHGuePH0yca
835Dx/AdxueLGOLgoSi+vyGaRQf4sMGjoRyMrm9OF8ougIXbfGij9b7i0kUPjifc
Dr3znK5gAeawHWRDzjHs5CJkAcs4ybqDRI8XSaXRag2r4fj9LwsG3jFO4OzGv6cf
bf6TwQHHpD9In9474oVg5kuXPghpwWbG0euckBmVyzWs+sMx9sB/IKe19tZu7+3N
PQIDAQAB
-----END PUBLIC KEY-----
`.trim();

		rsa.setPublicKey(publicKey);

		const encrypted = rsa.encrypt(JSON.stringify(data));

		if (!encrypted) {
			alert('Ошибка при шифровании данных!');
			return;
		}

		const encryptedData = {
			EncryptSubmission: true,
			Data: encrypted
		};

		fetch('/forms/submit', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(encryptedData)
		})
			.then(response => response.json())
			.then(result => {
				if (result.redirectUrl) {
					window.location.href = result.redirectUrl;
				}
			})
			.catch(error => {
				console.error('Произошла ошибка:', error);
			});
	}
</script>



